/* 
 * This file is part of Multibrush.
 * Multibrush is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * Multibrush is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser Public License
 * along with Multibrush.  If not, see <http://www.gnu.org/licenses/>.
 */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using NWN2Toolset;
using NWN2Toolset.Plugins;
using NWN2Toolset.NWN2.Data.ConversationData;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using NWN2Toolset.NWN2.Data;
using NWN2Toolset.NWN2.Data.TypedCollections;
using System.IO;
using System.Collections;

namespace ConversationPrinter
    {


    public partial class frmConv : Form
        {
        const string constBuf = "  ";
        string constEnd1 = "+";
        string constEnd2 = "*";
        const string filter = "Text  files (*.txt)|*.txt";
        Hashtable hashTable = new Hashtable();

        public NWN2GameConversation[] conversations;
        public frmConv()
            {
            InitializeComponent();
            NWN2GameConversationDictionary dictionary = NWN2Toolset.NWN2ToolsetMainForm.App.Module.Conversations;
            int num = dictionary.Values.Count;
            conversations = new NWN2GameConversation[dictionary.Values.Count];
            dictionary.Values.CopyTo(conversations, 0);
            var sorted = conversations.OrderBy(x => x.Name);
            
            foreach (NWN2GameConversation cn in sorted)
                {
                convListBox.Items.Add(cn.Name);
                }
            }

        private OEIShared.Utils.BWLanguages.BWLanguage getLang()
            {
            OEIShared.Utils.BWLanguages.BWLanguage lang = OEIShared.Utils.BWLanguages.BWLanguage.English;
            switch ((String)langCombo.SelectedItem)
                {
                case "English":
                 lang = OEIShared.Utils.BWLanguages.BWLanguage.English;
                 break;

                case "French":
                    lang = OEIShared.Utils.BWLanguages.BWLanguage.French;
                    break;

                case "German":
                    lang = OEIShared.Utils.BWLanguages.BWLanguage.German;
                    break;

                case "Italien":
                    lang = OEIShared.Utils.BWLanguages.BWLanguage.Italian;
                    break;

                case "Spanish":
                    lang = OEIShared.Utils.BWLanguages.BWLanguage.Spanish;
                    break;

                case "Polish":
                    lang = OEIShared.Utils.BWLanguages.BWLanguage.Polish;
                    break;

                case "Russian":
                    lang = OEIShared.Utils.BWLanguages.BWLanguage.Russian;
                    break;

                case "Korean":
                    lang = OEIShared.Utils.BWLanguages.BWLanguage.Korean;
                    break;

                case "Chinese (Traditional)":
                    lang = OEIShared.Utils.BWLanguages.BWLanguage.ChineseTraditional;
                    break;

                case "Chinese (Simplified)":
                    lang = OEIShared.Utils.BWLanguages.BWLanguage.ChineseSimplified;
                    break;

                case "Japanese":
                    lang = OEIShared.Utils.BWLanguages.BWLanguage.Japanese;
                    break;
            }
            return lang;
            }

        private void printConversation()
            {
            SaveFileDialog save = new SaveFileDialog();
            save.Filter = filter;
            

            if (save.ShowDialog() == DialogResult.OK)
                {
                string Location = save.FileName;
                OEIShared.Utils.BWLanguages.BWLanguage lang = getLang();
                StringBuilder builder = new StringBuilder();
                NWN2GameConversation cConversation = conversations[convListBox.SelectedIndex];
                cConversation.Demand();
                NWN2ConversationConnectorCollection col = cConversation.StartingList;
                builder.Append("From " + cConversation.Name + ", generated by ConversationPrinter    " + System.Environment.NewLine + " **** " + System.Environment.NewLine);

                // I recursively get all the needed information from the conversations
                if (col.Count > 0)
                    {
                    foreach (NWN2ConversationConnector conect in col)
                        {
                        if (hashTable[conect] == conect) continue;
                        hashTable[conect] = conect;
                        builder = recursiveGetText(builder, conect, lang, "");
                        }
                    }

                // I save the text
                TextWriter tw = new StreamWriter(Location);

                // write text
                tw.Write(builder.ToString());

                // close the stream
                tw.Close();
      //          Console.Write(builder.ToString());
                }
            }

        private StringBuilder recursiveGetText(StringBuilder strBuilder, NWN2ConversationConnector conv,
            OEIShared.Utils.BWLanguages.BWLanguage lang, string buffer)
            {
            strBuilder.Append(buffer);
            bool speaker = conv.Speaker == null || conv.Speaker == "";
            if (speaker)
                {
                strBuilder.Append(constEnd1);
                }
            else
                {
                strBuilder.Append(constEnd2);
                }
            string text = conv.Text[lang];
            if (conv.Link)
                {
                text = text + "[LINK]";
                }
            if (conv.Line.Children.Count == 0) 
                {
                text = "[END DIALOG] " + text;
                } 
            else if (text == "" && speaker)
                {
                    text = "[CONTINUE]";
                }
            strBuilder.Append(text);
            strBuilder.Append(System.Environment.NewLine);
            NWN2ConversationConnectorCollection col = conv.Line.Children;
            
            if (col.Count > 0)
                {
                foreach (NWN2ConversationConnector convCon in col)
                    {
                    if (hashTable[convCon] == convCon || conv.Link) continue;
                    hashTable[convCon] = convCon;
                    strBuilder = recursiveGetText(strBuilder, convCon, lang, buffer + constBuf);
                    }
                }

            return strBuilder;
            }

        private void convListBox_SelectedIndexChanged(object sender, EventArgs e)
            {
            disableSave();
            }

        private void disableSave()
            {
            var indices = convListBox.SelectedIndices;
            saveButton.Enabled = indices.Count > 0;
            label1.Text = "Status:";
            }

        private void convListBox_SelectedValueChanged(object sender, EventArgs e)
            {
            disableSave();
            }

        private void saveButton_Click(object sender, EventArgs e)
            {
            var indices = convListBox.SelectedIndices;
            if (indices.Count > 0)
                {
                printConversation();
                label1.Text = "Status: Success";
                }
            else
                {
                MessageBox.Show("You must have at least one conversation selected");
                saveButton.Enabled = false;
                label1.Text = "Status: Failure";
                }
            }

        private void frmConv_Load(object sender, EventArgs e)
            {

            }
        }
    }
